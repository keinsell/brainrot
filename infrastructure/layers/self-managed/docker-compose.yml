# https://docs.docker.com/compose/compose-file/05-services/#volumes
# ----------------------------------------
# Resource Presets
# ----------------------------------------
x-resource-preset-x1: &resource-preset-eco
  limits:
    cpus: '0.1'
    memory: 128M
x-resource-preset-x2: &resource-preset-low
  limits:
    cpus: '0.5'
    memory: 256M
x-resource-preset-x4: &resource-preset-mid
  limits:
    cpus: '1'
    memory: 1G
x-resource-preset-x8: &resource-preset-high
  limits:
    cpus: '2'
    memory: 2G
x-resource-preset-x16: &resource-preset-max
  limits:
    cpus: '4'
    memory: 4G
# ----------------------------------------
# Logging Configuration
# ----------------------------------------
x-logging-config: &logging-default
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"


name: "polylab"
services:
  # ----------------------------------------
  # Cloudflare Tunnel
  # ----------------------------------------
  # This is the core service that connects the
  # local development environment to the Cloudflare
  # network. It is used to expose the local development
  # environment to the internet.
  # ----------------------------------------
  tunnel:
    container_name: ${PROJECT}-tunnel
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_SERIVCE_TOKEN}
    networks:
      - infisical
      - twentycrm
    deploy:
      resources: *resource-preset-eco
  # ----------------------------------------

  # ----------------------------------------
  # Object Storage
  # ----------------------------------------
  minio:
    image: minio/minio
    container_name: ${PROJECT}-minio
    ports:
      - '${MINIO_PORT}:${MINIO_PORT}'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server --console-address ":9001" /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://minio:${MINIO_PORT}/minio/health/live" ]
      interval: 2s
      timeout: 10s
      retries: 5
    volumes:
      - minio_data:/data:z
    deploy:
      resources: *resource-preset-eco

  minio-migration:
    image: minio/mc
    container_name: ${PROJECT}-minio-migration
    env_file:
      - .env
    depends_on:
      minio:
        condition: service_started
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://${MINIO_HOST}:${MINIO_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb minio/stub;
      /usr/bin/mc mb minio/dummy;
      exit 0;
      "
    deploy:
      resources: *resource-preset-eco



  # ----------------------------------------
  # Object Management
  # ----------------------------------------
  imgproxy:
    container_name: ${PROJECT}-imgproxy
    image: darthsim/imgproxy:v3.8.0
    healthcheck:
      test: [ "CMD", "imgproxy", "health" ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      IMGPROXY_BIND: ":5001"
      IMGPROXY_USE_ETAG: "true"
      IMGPROXY_ENABLE_WEBP_DETECTION: true
    deploy:
      resources: *resource-preset-eco

  # ----------------------------------------
  # Cache
  # ----------------------------------------
  redis:
    image: redis
    container_name: ${PROJECT}-redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - infisical
    volumes:
      - redis_data:/data
    deploy:
      resources: *resource-preset-eco
  # ----------------------------------------
  # Database
  # ----------------------------------------
  postgres:
    container_name: ${PROJECT}-postgres
    image: plygrnd-postgres:latest
    build:
      context: postgres
      dockerfile: Dockerfile
    restart: always
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      #      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    #      - ./postgres/init.sql:/docker-entrypoint-initdb.d/00_setup_pg_graphql.sql
    networks:
      - infisical
      - twentycrm
    env_file:
      - .env
    healthcheck:
      test: "pg_isready --username=${POSTGRES_USER} && psql --username=${POSTGRES_USER} --list"
      interval: 5s
      timeout: 30s
      retries: 10

  # ----------------------------------------
  # Messaging
  # ----------------------------------------

  # ----------------------------------------
  # Core Services
  # ----------------------------------------
  # These are the core services that are required
  # to run the application.
  # ----------------------------------------
  # TODO: Kafka
  # TODO: Redis
  # TODO: Memcached
  # TODO: RabbitMQ
  # TODO: Elasticsearch
  # TODO: Kibana
  # TODO: Melisearch
  # TODO: Minio
  # TODO: IPFS
  # ----------------------------------------

  # ----------------------------------------
  # Observability Services
  # ----------------------------------------
  # These are the core services that are required
  # to run the application.
  # ----------------------------------------
  # TODO: HyperDX
  # TODO: Grafana
  # TODO: Prometheus
  # TODO: Jaeger
  # TODO: Zipkin

  # ----------------------------------------
  # Infisical
  # ----------------------------------------
  infisical:
    container_name: ${PROJECT}-infisical
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      infisical-migration:
        condition: service_completed_successfully
    image: infisical/infisical:latest-postgres
    ports:
      - ${INFISICAL_PORT}:8080
    environment:
      - NODE_ENV=production
      - SITE_URL=${INFISICAL_SITE_URL}
      - DB_CONNECTION_URI=${INFISICAL_DB_CONNECTION_URI}
      - AUTH_SECRET=${INFISICAL_AUTH_SECRET}
      - ENCRYPTION_KEY=${INFISICAL_ENCRYPTION_KEY}
      - REDIS_URL=${INFISICAL_REDIS_URL}
      - SMTP_HOST=
      - SMTP_PORT=
      - SMTP_NAME=
      - SMTP_USERNAME=
      - SMTP_PASSWORD=
    networks:
      - infisical
    deploy:
      resources: *resource-preset-eco
  infisical-migration:
    container_name: ${PROJECT}-infisical-migration
    depends_on:
      postgres:
        condition: service_healthy
    image: infisical/infisical:latest-postgres
    command: npm run migration:latest
    pull_policy: always
    environment:
      - DB_CONNECTION_URI=${INFISICAL_DB_CONNECTION_URI}
    networks:
      - infisical
    deploy:
      resources: *resource-preset-eco
  # ----------------------------------------

  # ----------------------------------------
  # Supabase
  # ----------------------------------------
  # TODO: Add Supabase service.
  # ----------------------------------------

  # ----------------------------------------
  # Sentry
  # ----------------------------------------
  # TODO: Add Sentry service.
  # ----------------------------------------

  # ----------------------------------------
  # TwentyCRM
  # ----------------------------------------
  twenty:
    image: twentycrm/twenty-front:latest
    container_name: ${PROJECT}-twenty
    ports:
      - ${TWENTY_PORT}:3000
    environment:
      - SIGN_IN_PREFILLED=${TWENTY_SIGN_IN_PREFILLED}
      - REACT_APP_SERVER_BASE_URL=${TWENTY_SERVER_URL}
      - REACT_APP_SERVER_AUTH_URL=${TWENTY_SERVER_URL}/auth
      - REACT_APP_SERVER_FILES_URL=${TWENTY_SERVER_URL}/files
    depends_on:
      - twenty-server
    networks:
      - twentycrm
    deploy:
      resources: *resource-preset-eco
  # docker exec -it polylab-twenty-server yarn database:reset
  twenty-server:
    image: twentycrm/twenty-server:latest
    container_name: ${PROJECT}-twenty-server
    ports:
      - ${TWENTY_SERVER_PORT}:${TWENTY_SERVER_PORT}
    environment:
      - SIGN_IN_PREFILLED=${TWENTY_SIGN_IN_PREFILLED}
      - PG_DATABASE_URL=${TWENTY_DATABASE_URL}
      - FRONT_BASE_URL=${TWENTY_SITE_URL}
      - PORT=${TWENTY_SERVER_PORT}
      - STORAGE_TYPE=local
      - STORAGE_LOCAL_PATH=.local-storage
      - ACCESS_TOKEN_SECRET=${TWENTY_ACCESS_TOKEN_SECRET}
      - LOGIN_TOKEN_SECRET=${TWENTY_LOGIN_TOKEN_SECRET}
      - REFRESH_TOKEN_SECRET=${TWENTY_REFRESH_TOKEN_SECRET}
    depends_on:
      - twenty-database
    networks:
      - twentycrm
    deploy:
      resources: *resource-preset-eco
  twenty-migrate:
    image: twentycrm/twenty-server:latest
    container_name: ${PROJECT}-twenty-migrate
    command: yarn nx database:init
    environment:
      - SIGN_IN_PREFILLED=${TWENTY_SIGN_IN_PREFILLED}
      - PG_DATABASE_URL=${TWENTY_DATABASE_URL}
      - FRONT_BASE_URL=${TWENTY_SITE_URL}
      - PORT=${TWENTY_SERVER_PORT}
      - STORAGE_TYPE=local
      - STORAGE_LOCAL_PATH=.local-storage
      - ACCESS_TOKEN_SECRET=${TWENTY_ACCESS_TOKEN_SECRET}
      - LOGIN_TOKEN_SECRET=${TWENTY_LOGIN_TOKEN_SECRET}
      - REFRESH_TOKEN_SECRET=${TWENTY_REFRESH_TOKEN_SECRET}
    depends_on:
      - twenty-database
    networks:
      - twentycrm
    deploy:
      resources: *resource-preset-eco
  twenty-database:
    image: twentycrm/twenty-postgres:latest
    volumes:
      - twenty_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=twenty
    networks:
      - twentycrm
    deploy:
      resources: *resource-preset-eco

  # ----------------------------------------
  # Blockchain
  # ----------------------------------------
  # These are the core services that are required
  # to run the application.
  # ----------------------------------------

volumes:
  postgres_data:
    name: ${PROJECT}-postgres
    driver: local
  redis_data:
    name: ${PROJECT}-redis
    driver: local
  minio_data:
    name: ${PROJECT}-minio
    driver: local
  twenty_data:
    name: ${PROJECT}-twenty
    driver: local

networks:
  infisical:
  sourcegraph:
  supabase:
  twentycrm: