VERSION 0.7

FROM node:20-slim
WORKDIR /app

deps:
    COPY package.json pnpm-lock.yaml ./
    RUN npm install -g pnpm && pnpm install
    # Instead of saving node_modules as an artifact, we're saving the entire deps context
    # The deps will be reused through layer caching

build:
    FROM +deps
    COPY . .
    RUN pnpm rewatch build || true
    RUN pnpm next build
    SAVE ARTIFACT .next AS LOCAL .next
    SAVE ARTIFACT public AS LOCAL public
    # Add a note about what happens during next build
    # next build generates:
    # - .next directory (containing the compiled application)
    # - .next/standalone (if `output: 'standalone'` is set in next.config.js)
    # - .next/static (static assets that need to be served)

build-with-dist:
    FROM +build
    # Create an empty dist directory if it doesn't exist
    RUN mkdir -p dist
    SAVE ARTIFACT dist

tarball:
    FROM +build
    RUN mkdir -p /app/tarball
    RUN cp -r .next /app/tarball
    RUN cp -r public /app/tarball
    RUN if [ -d "dist" ]; then cp -r dist /app/tarball; fi
    RUN cp -r node_modules /app/tarball
    RUN cp package.json /app/tarball
    RUN cp next.config.ts /app/tarball
    RUN tar -czvf fwa-build.tar.gz -C /app/tarball .
    SAVE ARTIFACT fwa-build.tar.gz AS LOCAL artifacts/fwa-build.tar.gz

docker:
    FROM node:20-slim
    WORKDIR /app
    COPY +build/.next/standalone .
    COPY +build/.next/static ./.next/static
    COPY +build/public ./public
    ENV NODE_ENV=production
    ENV PORT=3000
    EXPOSE 3000
    CMD ["node", "server.js"]
    SAVE IMAGE fucking-web-application:latest
    # SAVE IMAGE --push ${REGISTRY_URL:-ghcr.io/keinsell}/fucking-web-application:${TAG:-latest}

all:
    BUILD +tarball
    BUILD +docker 