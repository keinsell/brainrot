name: "polylab"
services:
  # ----------------------------------------
  # Cloudflare Tunnel
  # ----------------------------------------
  # This is the core service that connects the
  # local development environment to the Cloudflare
  # network. It is used to expose the local development
  # environment to the internet.
  # ----------------------------------------
  tunnel:
    container_name: ${PROJECT}-tunnel
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_SERIVCE_TOKEN}
    networks:
      - infisical
  # ----------------------------------------

  # ----------------------------------------
  # Object Storage
  # ----------------------------------------
  minio:
    image: minio/minio
    container_name: ${PROJECT}-minio
    ports:
      - '${MINIO_PORT}:${MINIO_PORT}'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}

    command: server --console-address ":9001" /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://minio:${MINIO_PORT}/minio/health/live" ]
      interval: 2s
      timeout: 10s
      retries: 5
    volumes:
      - minio_data:/data:z
  minio-migration:
    image: minio/mc
    container_name: ${PROJECT}-minio-migration
    env_file:
      - .env
    depends_on:
      minio:
        condition: service_started
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://${MINIO_HOST}:${MINIO_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb minio/stub;
      /usr/bin/mc mb minio/dummy;
      exit 0;
      "


  # ----------------------------------------
  # Cache
  # ----------------------------------------
  redis:
    image: redis
    container_name: ${PROJECT}-redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - infisical
    volumes:
      - redis_data:/data

  # ----------------------------------------
  # Database
  # ----------------------------------------
  postgres:
    container_name: ${PROJECT}-postgres
    image: postgres:14-alpine
    restart: always
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - infisical
    env_file:
      - .env
    healthcheck:
      test: "pg_isready --username=${POSTGRES_USER} && psql --username=${POSTGRES_USER} --list"
      interval: 5s
      timeout: 10s
      retries: 10

  # ----------------------------------------
  # Messaging
  # ----------------------------------------

  # ----------------------------------------
  # Core Services
  # ----------------------------------------
  # These are the core services that are required
  # to run the application.
  # ----------------------------------------
  # TODO: Kafka
  # TODO: Redis
  # TODO: Memcached
  # TODO: RabbitMQ
  # TODO: Elasticsearch
  # TODO: Kibana
  # TODO: Melisearch
  # TODO: Minio
  # TODO: IPFS
  # ----------------------------------------

  # ----------------------------------------
  # Observability Services
  # ----------------------------------------
  # These are the core services that are required
  # to run the application.
  # ----------------------------------------
  # TODO: HyperDX
  # TODO: Grafana
  # TODO: Prometheus
  # TODO: Jaeger
  # TODO: Zipkin

  # ----------------------------------------
  # Infisical
  # ----------------------------------------
  infisical:
    container_name: ${PROJECT}-infisical
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      infisical-migration:
        condition: service_completed_successfully
    image: infisical/infisical:latest-postgres
    pull_policy: always
    ports:
      - ${INFISICAL_PORT}:8080
    environment:
      - NODE_ENV=production
      - SITE_URL=${INFISICAL_SITE_URL}
      - DB_CONNECTION_URI=${INFISICAL_DB_CONNECTION_URI}
      - AUTH_SECRET=${INFISICAL_AUTH_SECRET}
      - ENCRYPTION_KEY=${INFISICAL_ENCRYPTION_KEY}
      - REDIS_URL=${INFISICAL_REDIS_URL}
      - SMTP_HOST=
      - SMTP_PORT=
      - SMTP_NAME=
      - SMTP_USERNAME=
      - SMTP_PASSWORD=
    networks:
      - infisical
  infisical-migration:
    container_name: ${PROJECT}-infisical-migration
    depends_on:
      postgres:
        condition: service_healthy
    image: infisical/infisical:latest-postgres
    command: npm run migration:latest
    pull_policy: always
    environment:
      - DB_CONNECTION_URI=${INFISICAL_DB_CONNECTION_URI}
    networks:
      - infisical
  # ----------------------------------------

  # ----------------------------------------
  # Supabase
  # ----------------------------------------
  # TODO: Add Supabase service.
  # ----------------------------------------

  # ----------------------------------------
  # Sentry
  # ----------------------------------------
  # TODO: Add Sentry service.
  # ----------------------------------------

  # ----------------------------------------
  # TwentyCRM
  # ----------------------------------------
  # TODO: Add TwentyCRM service.
  # ----------------------------------------

  # ----------------------------------------
  # Blockchain
  # ----------------------------------------
  # These are the core services that are required
  # to run the application.
  # ----------------------------------------

volumes:
  postgres_data:
    name: ${PROJECT}-postgres
    driver: local
  redis_data:
    name: ${PROJECT}-redis
    driver: local
  minio_data:
    name: ${PROJECT}-minio
    driver: local

networks:
  infisical: